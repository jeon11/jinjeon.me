[{"authors":["jin"],"categories":null,"content":"I am a 1st year graduate student at Human Centered Design and Engineering (HCDE) program at the University of Washington.\nI am a curious-minded, data enthusiast passionate in UX research. I believe that data-driven insights are at the heart of delivering meaningful experiences. With my background in data science, I use both quantitative and qualitative methods to synthesize insights and unveil users\u0026rsquo; underlying needs.\nSee my projects \u0026gt;\u0026gt; HERE \u0026lt;\u0026lt;. Click here for CV. -- ","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://jinjeon.me/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"I am a 1st year graduate student at Human Centered Design and Engineering (HCDE) program at the University of Washington.\nI am a curious-minded, data enthusiast passionate in UX research. I believe that data-driven insights are at the heart of delivering meaningful experiences. With my background in data science, I use both quantitative and qualitative methods to synthesize insights and unveil users\u0026rsquo; underlying needs.\nSee my projects \u0026gt;\u0026gt; HERE \u0026lt;\u0026lt;. Click here for CV.","tags":null,"title":"Jin Jeon","type":"authors"},{"authors":null,"categories":null,"content":"\n","date":1607558400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607558400,"objectID":"0852b0de634f6d6c641c401c5818cdba","permalink":"https://jinjeon.me/project/coffitok/","publishdate":"2020-12-10T00:00:00Z","relpermalink":"/project/coffitok/","section":"project","summary":"From identifying user needs to iterating prototypes, a 10-week project in user centered design **(opens external project link)**","tags":["highlights","research","side-projects"],"title":"Coffitok","type":"project"},{"authors":null,"categories":null,"content":"  .introduction { column-count: 2; }  My Role: UX researcher in a 4-person team of researchers and designers\nMethods: generative research, competitive analysis, remote qualitative interview, journey map, affinity diagram\nTimeline:  June 2020 - Oct 2020 (~4 months)\nStakeholders: Research manager, product designers, brand manager, eCommerce team \nOverview To help Alaska Airlines flexibly adapt to the COVID-19 pandemic and improve its upsell strategies, we conducted user research to understand users\u0026rsquo; behaviors, values, and motivations at different stages of their flight travel experiences. We studied Alaska Airlines and five other major airlines operating in the US to conduct competitive analysis and pair insights from user experience benchmarking.\nImpact  Presented four major recommendations to research managers, product and eCommerce teams. Research findings matched with the ongoing internal research, suggesting its validity. Provided new insights to improve users\u0026rsquo; overall experiences by adapting to the pandemic world.  Research Question  \u0026ldquo;What are the motivations for upgrading throughout the booking and overall flight experience with Alaska and its competitors? Additionally, has the current pandemic affected this experience?\u0026rdquo;\n Project Timeline    Our project spanned from late June to October. We initiated our study with reviewing company\u0026rsquo;s past research, examining the different competitors and case studies. We then proceeded with running qualitative interviews on UserTesting.com to get to the hearty meat of this research   User Research Please note that below are summarized insights and challenges our team had during the user research process.\nPreliminary \u0026amp; Competitive Analysis Goal:\nTo first better understand the competitive landscape of the airline industries, we examined the websites of the six airlines to visualize the user flow of booking a flight.\n💡 Key/fun Fact:\nDespite the industry standard of generalizing the classification of seat types into economy, business, and first class, we noticed that each airline had different ways of classifying, naming, and promoting the different fare classes. We searched for areas that could be confusing and be improved for the users.\n   Each airline had its own ways of classifying and naming the seats. Even though the perks that came along with each fare type were quite consistent throughout, low-cost airline, such as Southwest, had a uniquely different seating plan.   Insights:  Alaska Airlines\u0026rsquo; fare types were straightforward and transparent. The seat names are in consistent ascending order: i.e. saver → economy → premium → first class. Fare types and their associated perks can become very unclear:\ne.g. JetBlue\u0026rsquo;s first class name is \u0026ldquo;Mint\u0026rdquo; which has no association with Blue.\ne.g. SouthWest\u0026rsquo;s distinction between basic economy and economy is vague. United had the most visually busy interface and complex fare types, leading to a poor booking experience.  Qualitative Interview Goal:\nTo understand users\u0026rsquo;:  General flight behavior Top values\n Pain points\n \nMethods:\n Remote Qualitative Interview: \nWe conducted a total of 30 interviews (5 participants from 6 different airlines) remotely over UserTesting.com and Zoom. We probed for their general flying behaviors and preferences, and narrowed down to their most recent flight experience (considering both pre-COVID \u0026amp; post-COVID).    We accounted for various factors, including age, gender, income range, and travel behaviors, during our interview to capture the holistic view of participants\u0026rsquo; travel experiences.   Interactive Journey Maps:\nWe incorporated an interactive journey map session in each interview to have participants walkthrough their most recent experience and capture their moment-to-moment emotions and actions.\nTo capture their moment-to-moment emotions and actions, we divided the entire flight experience into 5 phases:  booking the flight ticket (e.g. web vs. mobile vs. phone) before 24 hours of travel (includes preparation and traveling to the airport) being at the airport (checking-in, luggage, security checks, and so on) in-flight (seat space, perks, food \u0026amp; beverage, etc) arrival (post travel experience)    A simplified abstract example of the interactive journey map: Participants can vertically toggle each action item (as shown in the red arrows) based on their overall experience of that particular event (Good to Poor).   \nThematic Analysis    We explored multi-facets of the travel experience to search for emerging themes from the qualitative data we collected from interviews and journey maps.      Overview of our affinity map. We inductively searched for overarching themes by\u0026hellip;\nParticipant journey map → airline journey map → all airline journey map. From each participant\u0026rsquo;s journey map, we combined them to characterize the overall experience of each airline. We then combined all airlines to identify any patterns.   Key Insights \u0026amp; Results Please note that below are partial results due to NDA.\nPersonas/Highlights We developed three prototypical personas (we intentionally used the term \u0026ldquo;highlight\u0026rdquo; instead of \u0026ldquo;persona\u0026rdquo; because they were modeled after participants that stood out with clear preference of values and motivations). We introduced the demographic information, a hypothetical trip destination, quote from the interview, means used to book and upgrade the seat. We also identified top values, pain points, and motivations for upgrading a seat.\n   This first type of personas is characterized by how upgrading a seat is mandatory due to his large body size. With his tall height and broad shoulders, upgrading a seat is a necessity.      The second person is characterized by how traveling in the pandemic era is worst not just because of the safety concerns, but also due to the lack of services. Another unique perspective is the consideration for how family members can buy tickets for other family members.      This last person is characterized as a bargain hunter, constantly looking for deals and offers. The person is unique in that he is tech savvy and even conscious about which aircraft type he would be flying in.   Characterizing the Travel Experience    We visualized a typical journey map, capturing the different motivations for upgrading a seat at each stage of travel. We identified values, emotions, and quotes.    We then devised step-by-step recommendations for each travel stage (NDA).\nRecommendations Please note this part is NDA sensitive. Based on key insights and results we synthesized from the data, we came up with four major recommendations.    Our high-level summaries of the four recommendations   💡 Key/fun Fact:\n TRANSPARENCY MATTERS: it is a critical factor in the overall experience especially due to COVID. For example, users desire clear communication on what services and ancillaries to expect when flying during this pandemic era. metrics, such as time to complete a booking, are less important than transparency Transparency is important because it translates to expectations. When expectations are not met, the overall experience worsens.  Clear communication on what each seat upgrade entails can entice users. e.g. \u0026ldquo;upgrading a seat will get you a 7-inch wider leg room\u0026rdquo;.  Users don\u0026rsquo;t mind receiving few more notifications for clarifying and communicating the travel information (especially if contains deals).  \nDesign Recommendations Based on the four recommendations, we additionally modified some of the website elements to convey more transparency.\n1. Show what services are suspended    Click to see in a large view/ We added a devoted section that clearly communicates what services are currently suspended especially due to COVID (e.g. in-flight food \u0026amp; beverages). When a user is expecting quality in-flight service but does not receive it, the experience cannot be reverted   2. Clearly communicate the perks of upgrading    Click to see in a large view/ Communicating what an upgraded seat entails provide transparency and facilitates the upgrading decision.   Limitations \u0026amp; Lessons Learned  The participants were not racially diverse as recruitment of participants were automatically done via UserTesting.com.\n Majority of participants\u0026rsquo; recent travels occurred 6 months ago, in which they may have distorted memory of their travel experiences.\n In a qualitative research, it\u0026rsquo;s more about finding about the big buckets \u0026amp; themes unlike a quant research. When presenting the different demographic groups, it can be as easy as describing \u0026ldquo;we examined a wide income group\u0026rdquo; instead of graphing out all the different income groups. If all the demographic information was graphically presented, it can convey the different stakeholders, esp. data scientists, that the results and insights will be quant focused when the research is actually qualitative.\n     With that, I end with a fun quote from one of our participants 😄   Back to top ^ \n","date":1601856000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1601856000,"objectID":"c24341871115386f21f688709c1cda00","permalink":"https://jinjeon.me/project/alaska-airlines/","publishdate":"2020-10-05T00:00:00Z","relpermalink":"/project/alaska-airlines/","section":"project","summary":"Moderated interviews and journey mapping to visualize users' travel experiences","tags":["highlights","research"],"title":"Alaska Airlines (Company sponsored summer project/NDA)","type":"project"},{"authors":null,"categories":null,"content":"  .introduction { column-count: 2; }  My Role: UX researcher in a 4-person team of researchers and designers\nMethods: survey, interview, affinity diagram, prototyping, heuristic evaluation, usability testing\nTimeline:  Jul 2020 - Sep 2020 (~3 months)\nStakeholders: product manager, senior designer, clinicians, patients \nCurrently under construction. Please visit back! In summer 2020, I had a chance to work with the health tracker team at Navigating Cancer, a company that is devoted to enhancing the patient relationship management for cancer patients. During the weird time of COVID, the research team was working remotely as an international team with each of us in different time zones. I was also flying around being in the US and in my hometown Korea.\nThe Design Process We used design thinking framework to help us guide our research focus by better framing the problem and solving the users’ underlying needs.We adapted the double-diamond model, which maps the divergent and convergent stages of the design process. The model is divided into 4 phases (discover, define, develop, and deliver). We begin by exploring the users’ problem space through various research. Then we narrow down to defining the user needs. At the developing phase, we would build prototypes and deliver to the end users to test the product.\nWhile the ideal model is a perfectly-shaped two diamonds, the reality of our journey was rather a deformed diamond process. As we had to go back-and-forth within each phase, we had multiple pivots, which ended up being a valuable process as we gained greater insights to the problem space.\n\n","date":1596153600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1596153600,"objectID":"84f52849ca5b6875434cb4e471eb9d08","permalink":"https://jinjeon.me/project/navigating-cancer/","publishdate":"2020-07-31T00:00:00Z","relpermalink":"/project/navigating-cancer/","section":"project","summary":"**//Currently under construction//**\nConducted user research to identify problems \u0026 recommended features to enhance the symptom management experience","tags":["highlights","research"],"title":"Navigating Cancer (NDA)","type":"project"},{"authors":null,"categories":null,"content":" Currently under development Image Reconstruction using Perlin Noise\n\n","date":1590883200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1590883200,"objectID":"eb98cfcaf675131158c908aa4dfc1182","permalink":"https://jinjeon.me/project/data-viz/","publishdate":"2020-05-31T00:00:00Z","relpermalink":"/project/data-viz/","section":"project","summary":"**//Currently under construction//**\nExamples of graphs created using Python and MATLAB, and their source codes","tags":["highlights","side-projects"],"title":"Data Visualizations","type":"project"},{"authors":null,"categories":null,"content":"LoREM IPSUM\n   Cutler RA, Jeon J, Polyn SM. Characterizing the interaction of temporal and semantic information in categorized memory search. Poster presented at: Cognitive Neuroscience Society; 2020 May 2-5; Virtual      Cutler RA, Jeon J, Brown-Schmidt S, Polyn SM. Semantic and temporal structure in memory for narratives: A benefit for semantically congruent ideas. Poster presented at: Psychonomic Society; 2019 Nov 14-17; Montreal, QC   \n","date":1588291200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588291200,"objectID":"cae36717217bbd3e87f6f8141763e8b9","permalink":"https://jinjeon.me/project/conference/","publishdate":"2020-05-01T00:00:00Z","relpermalink":"/project/conference/","section":"project","summary":"Python","tags":["research"],"title":"Conference Presentations","type":"project"},{"authors":null,"categories":null,"content":" Entropy in Neuroimaging Entropy has three interpretations (three are identical, but in different expressions \u0026amp; relations):\n1. Amount of information in an event (N of possible outcomes, or grey value in images)\n The larger the number of possible outcomes, the larger the information gain  Ex. Information gain from a sentence would exponentially increase with length of sentence\n If outcome is 1, information gain is 0 (i.e. log1 = 0)   2. Uncertainty of outcome in an event\n Amount of information gain with probability is inversely related to the probability that the event will take place. The information per event is weighted by the probability of the event The rarer an event, the more significance the event has When all events are likely to occur, uncertainty or entropy is maximum (ie. more possible outcomes) Most common entropy form is the Shannon\u0026rsquo;s entropy: \\begin{equation} H = \\sum_{i} p_i log(p_i) \\end{equation}   Entropy Example \u0026gt; In a fair coin toss, entropy is maximum. Vice versa, the more unfair the coint toss is, the more definitive the outcome is (which means lower entropy)\n\u0026gt; Fair coin toss: P(head) = 0.5, P(tail) = 0.5\n\u0026gt; Entropy = -0.5log0.5 - 0.5log0.5 = 0.150 + 0.150 = 0.300 \u0026gt;\n\u0026gt; Unfair coin toss: P(head) = 0.8, P(tail) = 0.2\n\u0026gt; Entropy = -0.8log0.8 - 0.2log0.2 = 0.077 + 0.140 = 0.217\n 3. Dispersion of probability distribution\n Shannon\u0026rsquo;s entropy can be used as a measure of dispersion of a probability distribution. It can be computed on images by looking at their dispersion of grey values Image with single intensity will have low entropy value as it contains little information. Conversely, if image with varying intesity will have higher entropy value with more information Ex. image with single sharp peak (ie. grey value condensed in small area) will have low entropy value  Mutual Information The goal of registration is to maximize mutual information or the overlaps. There are three ways of interpreting MI, in which they are identical but in different forms of expression and relation of variables.\n I(X, Y) = H(Y) - H(Y | X)\n This is the most closest form of mutual information. ie. MI of X and Y is subtracting entropy of H(Y) from the conditional entropy H(Y|X) (or p(Y) given p(X): chance of grey value in B given that corresponding image in A has grey value).\n In expression of uncertainty, MI is the amount by which uncertainty about Y changes when the amount of X containing Y is given   I(X, Y) = H(X) + H(Y) - H(X, Y)\n It is the most closest form to joint entropy. H(X | Y) tells us that mutual information is greater when the joint entropy is lower. Small entropy or less dispersion would mean that information overlaps more.\n  I(X, Y) = Sum of [p(x,y) log (p(x,y) / p(x)p(y))]\n This formula is analogous to Kullback-Leibler distance, which measures the distance between two distributions. It measures the dependence of the two images by calculating the distance between the joint distribution of the image\u0026rsquo;s grey values p(x,y) and the joint distribution in case of independence of the two images p(x)p(y) We will use this formula to measure MI later in the code   Code Implementation Now let\u0026rsquo;s try using Python to measure mutual information of given images. We will be mainly comparing in two ways: comparing the identical images, and two different images.\n1. Let\u0026rsquo;s begin with a setup, and direct the image files from __future__ import division import numpy as np import matplotlib.pyplot as plt import os import nibabel as nib # set gray colormap and nearest neighbor interpolation by default plt.rcParams['image.cmap'] = 'gray' plt.rcParams['image.interpolation'] = 'nearest' # set the images os.chdir('/Users/Jin/Documents/MATLAB') img1 = '4_23_Drake.nii' img2 = '4_24_Denzel_Washington.nii'  2. Let\u0026rsquo;s slice the image and set side by side to display def get_img_slice(img, size=50): \u0026quot;\u0026quot;\u0026quot; load the image using nibabel and slice the image by given size Parameters ---------- img: nii image data read via nibabel Returns ------- numpy memmap: ndarray of image slice \u0026quot;\u0026quot;\u0026quot; img_data = nib.load(img) img_data = img_data.get_data() img_slice = img_data[:, :, size] # 50 is arbitrary here # convert any nans to 0s img_nans = np.isnan(img_slice) img_slice[img_nans] = 0 return img_slice img1_slice = get_img_slice(img1) img2_slice = get_img_slice(img2)  # display images left and right def plot_raw(img1, img2): plt.imshow(np.hstack((img1, img2))) plt.show() plot_raw(img1_slice, img1_slice)  3. Let\u0026rsquo;s plot a 1d histogram for each of the two iamges def plot_hist1d(img1, img2, bins=20): \u0026quot;\u0026quot;\u0026quot; one dimensional histogram of the slices Parameters ---------- img1: nii image data read via nibabel img2: nii image data read via nibabel bins: optional (default=20) bin size of the histogram Returns ------- histogram comparing two images side by side \u0026quot;\u0026quot;\u0026quot; fig, axes = plt.subplots(1, 2) axes[0].hist(img1.ravel(), bins) axes[0].set_title('Img1 histogram') axes[1].hist(img2.ravel(), bins) axes[1].set_title('Img2 histogram') plt.show()  plot_hist1d(img1_slice, img2_slice)  4. Let\u0026rsquo;s plot the two images against each other on a scatter plot, and calculate correlation coefficient def plot_scatter2d(img1, img2): \u0026quot;\u0026quot;\u0026quot; plot the two image's histogram against each other Parameters ---------- img1: nii image data read via nibabel img2: nii image data read via nibabel Returns ------- 2d plotting of the two images and correlation coeeficient \u0026quot;\u0026quot;\u0026quot; corr = np.corrcoef(img1.ravel(), img2.ravel())[0, 1] plt.plot(img1.ravel(), img2.ravel(), '.') plt.xlabel('Img1 signal') plt.ylabel('Img2 signal') plt.title('Img1 vs Img2 signal cc=' + str(corr)) plt.show()  # this one is comparing two identical images so it should equal 1 plot_scatter2d(img1_slice, img1_slice) # image 1 vs image 2 plot_scatter2d(img1_slice, img2_slice)  Feature Space Using MI as a registration measure, we plot a feature space (or joint histogram), a two-dimensional plot showing the combinations of grey values in each of the two images for all corresponding points. For example, for each corresponding point (x, y), in which x and y are coordinates of first and second images respectively,\nAs the alignment of the two images change, the feature space changes. The more correctly registered the two images are, the more anatomical structures will overlap, showing clusters for the grey values. When the images are misaligned, the intensity of the clusters for certain structures will decrease, and a new pair of (x, y) will be matched as the image gets incorrectly aligned with other nearby structures of the other image. This is be shown as the dispersion of the clustering.\n5. Let\u0026rsquo;s plot a joint histogram now def plot_joint_histogram(img1, img2, bins=20, log=True): \u0026quot;\u0026quot;\u0026quot; plot feature space. Given two images, the feature space is constructed by counting the number of times a combination of grey values occur Parameters ---------- img1: nii image data read via nibabel img2: nii image data read via nibabel bins: optional (default=20) bin size of the histogram log: boolean (default=True) keeping it true will show a better contrasted image Returns ------- joint histogram feature space of the two images in graph \u0026quot;\u0026quot;\u0026quot; hist_2d, x_edges, y_edges = np.histogram2d(img1.ravel(), img2.ravel(), bins) # transpose to put the T1 bins on the horizontal axis and use 'lower' to put 0, 0 at the bottom of the plot if not log: plt.imshow(hist_2d.T, origin='lower') plt.xlabel('Img1 signal bin') plt.ylabel('Img2 signal bin') # log the values to reduce the bins with large values hist_2d_log = np.zeros(hist_2d.shape) non_zeros = hist_2d != 0 hist_2d_log[non_zeros] = np.log(hist_2d[non_zeros]) plt.imshow(hist_2d_log.T, origin='lower') plt.xlabel('Img1 signal bin') plt.ylabel('Img2 signal bin')  # this should print a linear graph as it's comparing it to itself print(plot_joint_histogram(img1_slice, img1_slice))  None  # compare images 1 and 2 print(plot_joint_histogram(img1_slice, img2_slice))  None  6. Let\u0026rsquo;s calculate the mutual information of the two images now. We use the third formula stated above to measure the overlaps of the two images. The goal of registration is to maximize mutual information or the overlaps.\ndef mutual_information(img1, img2, bins=20): \u0026quot;\u0026quot;\u0026quot; measure the mutual information of the given two images Parameters ---------- img1: nii image data read via nibabel img2: nii image data read via nibabel bins: optional (default=20) bin size of the histogram Returns ------- calculated mutual information: float \u0026quot;\u0026quot;\u0026quot; hist_2d, x_edges, y_edges = np.histogram2d(img1.ravel(), img2.ravel(), bins) # convert bins counts to probability values pxy = hist_2d / float(np.sum(hist_2d)) px = np.sum(pxy, axis=1) # marginal x over y py = np.sum(pxy, axis=0) # marginal y over x px_py = px[:, None] * py[None, :] # broadcast to multiply marginals # now we can do the calculation using the pxy, px_py 2D arrays nonzeros = pxy \u0026gt; 0 # filer out the zero values return np.sum(pxy[nonzeros] * np.log(pxy[nonzeros] / px_py[nonzeros]))  # the MI value of the first should be greater than the second as the first is comparing the image to itself print(mutual_information(img1_slice, img1_slice)) print(mutual_information(img1_slice, img2_slice))  1.1967155090861803 0.20578049748917815  Calculating the Grand Average of Mutual Information The codes above are detailed step-by-step processes. We can condense the codes above into one useful function that will allow us to examine the overall average of mutual information of each every scan image to the register image.\nFor example, given a register type (\u0026lsquo;rtf\u0026rsquo; for register to first image, or \u0026lsquo;rtm\u0026rsquo; for register to mean), it will calculate each scan to the register image, calculate the MI, and return the grand average MI value.\nNote: The code is currently based on ACCRE system so the paths directing to the images must be changed for flexible use. The path should direct to the folder which holds all the scan images, and since it requires gigabytes of data, I had to implement the code on ACCRE-use only.\ndef get_avg_mi(subjID, type='rtf', saveText=False, verbose=False, nScans=187): \u0026quot;\u0026quot;\u0026quot; calculates the correlation coefficient and mutual information of the registered image to the rest of image files, and returns the grand average and trial averages Parameters ---------- subjID : str string of subject data (ie. 'cdcatmr011') type : str {'rtf', 'rtm'} registration type that would either register to first scan image or the mean image (default: 'rtf') saveText : boolean if True, will save the table report to a separate text file (default: False) verbose : boolean if True, will print out which scan file is being worked on (default: False) nScans : int integer of how many scans to expect per each run (default: 187) Returns ------- cc_all: list list of all correlation coefficient values mi_all: list list of all mutual information values \u0026quot;\u0026quot;\u0026quot; saveText = False subj = str(subjID) baseDir = '/scratch/polynlab/fmri/cdcatmr/' funcDir = baseDir + subj + '/images/func' tag = 'func' if type == 'rtf': # register to first sourceImg = '/func1/func1_00001.nii' # [rmeanfunc1_00001.nii, meanfunc1_00001.nii] # tag = 'func' elif type == 'rtm': # register to mean sourceImg = '/func1/meanfunc1_00001.nii' # tag = 'rfunc' resDir = '/home/jeonj1/proj/mi' os.chdir(funcDir) funcs = os.listdir(funcDir) funcs.sort() # funcs = ['func1', 'func2', ... 'func7', 'func8'] meanImg = mi.get_img_slice(funcDir + sourceImg, verbose=verbose) mi_listVar = [] cc_listVar = [] # loop by each functional run for i in range(0, len(funcs)): curr_func = funcs[i] # let's first create list variables for each functional run temp = '' temp = 'mi_' + curr_func + ' = []' exec(temp) mi_listVar.append('mi_' + curr_func) temp = '' temp = 'cc_' + curr_func + ' = []' exec(temp) cc_listVar.append('cc_' + curr_func) # now let's read in each functional run folder cfuncDir = funcDir + '/' + curr_func os.chdir(cfuncDir) nii_files = os.listdir(cfuncDir) nii_files = [x for x in nii_files if x.startswith(tag) and x.endswith('nii')] nii_files.sort() # sanity check: count scan files assert len(nii_files) == nScans, \u0026quot;total scan files found do not match \u0026quot; + str(nScans) + \u0026quot; for func run \u0026quot; + str(i+1) # loop by each scan within run for j in range(0, nScans): if verbose: print('starting ' + curr_func + ' | scan ' + str(j+1)) curr_nii = mi.get_img_slice(nii_files[j], verbose=verbose) corr = mi.get_core(meanImg, curr_nii) mutual_info = mi.mutual_information(meanImg, curr_nii) # append each list temp_cc = 'cc_' + curr_func + '.append(corr)' exec(temp_cc) temp_mi = 'mi_' + curr_func + '.append(mutual_info)' exec(temp_mi) cc_sums = [] mi_sums = [] for r in range(0, len(funcs)): cc_sums.append(sum(eval(cc_listVar[r]))) mi_sums.append(sum(eval(mi_listVar[r]))) # get all entries in a single list cc_all = [] mi_all = [] for r in range(0, len(funcs)): cc_all = cc_all + eval(cc_listVar[r]) mi_all = mi_all + eval(mi_listVar[r]) reports = [] reports.append(['avg cc', sum(cc_sums)/(nScans*len(funcs))]) reports.append(['avg mi', sum(mi_sums)/(nScans*len(funcs))]) reports.append(['cc by runs', '-----']) for l in cc_listVar: reports.append([l, sum(eval(l))/nScans]) reports.append(['mi by runs', '-----']) for l in mi_listVar: reports.append([l, sum(eval(l))/nScans]) print(tabulate(reports)) if saveText: with open(resDir + '/' + subj + '_mi_' + os.path.basename(sourceImg) + '.txt', 'w') as f: for item in reports: f.write(\u0026quot;%s\\n\u0026quot; % item) print('saved the table report to ' + resDir) return cc_all, mi_all  T-test and Plotting We can use the function get_avg_mi above to calculate the grand average. Then we will run a t-test on the two averages and plot the differences for visual reference. The script below is currently somewhat hard coded for simplicity sake.\nnScans = 187 nRuns = 8 # we use the get_avg_mi function stated above. Specify the subject and register type. cc1, mi1 = get_avg_mi('cdcatmr066', 'rtf', verbose=True) # register to first scan cc2, mi2 = get_avg_mi('cdcatmr066', 'rtm', verbose=True) # register to mean assert len(cc1) == len(cc2) == nScans * nRuns assert len(mi1) == len(mi2) == nScans * nRuns cc_t, cc_p = stats.ttest_ind(cc1, cc2) mi_t, mi_p = stats.ttest_ind(mi1, mi2) import numpy as np import seaborn as sns import matplotlib.pyplot as plt # switch matplotlib backend so that it knows it won't print anything. plt.switch_backend('agg') # sns.set(color_codes=True) sns.set_color_codes('pastel') # sns.set_palette(\u0026quot;tab10\u0026quot;) plt.figure(0) sns.distplot(cc1, label='rtf'); sns.distplot(cc2, label='rtm'); plt.legend() plt.title('correlation coefficient n=' + str(len(cc1))) plt.savefig('/home/jeonj1/proj/mi/cc_distplot.png') plt.figure(1) sns.distplot(mi1, label='rtf'); sns.distplot(mi2, label='rtm'); plt.legend() plt.title('mutual info | n=' + str(len(mi1))) plt.savefig('/home/jeonj1/proj/mi/mi_distplot.png') # let's plot box-dist plot combined f, (ax_box1, ax_box2, ax_dist) = plt.subplots(3, sharex=True, gridspec_kw= {\u0026quot;height_ratios\u0026quot;: (0.3, 0.3, 1)}) cc1_mean = np.mean(cc1) cc2_mean = np.mean(cc2) sns.boxplot(cc1, ax=ax_box1, color='b') sns.boxplot(cc2, ax=ax_box2, color='r') ax_box1.axvline(cc1_mean, color='g', linestyle='--') ax_box2.axvline(cc2_mean, color='m', linestyle='--') plt.subplots_adjust(top=0.87) plt.suptitle('correlation coefficient n=' + str(len(cc1)), fontsize = 16) sns.distplot(cc1, ax=ax_dist, label='rtf', color='b', norm_hist=True) sns.distplot(cc2, ax=ax_dist, label='rtm', color='r', norm_hist=True) ax_dist.axvline(cc1_mean, color='g', linestyle='--') ax_dist.axvline(cc2_mean, color='m', linestyle='--') plt.legend() ax_box1.set(xlabel='') ax_box2.set(xlabel='') plt.savefig('/home/jeonj1/proj/mi/cc_box_distplot.png') # let's plot box-dist plot combined f, (ax_box1, ax_box2, ax_dist) = plt.subplots(3, sharex=True, gridspec_kw= {\u0026quot;height_ratios\u0026quot;: (0.3, 0.3, 1)}) mi1_mean = np.mean(mi1) mi2_mean = np.mean(mi2) sns.boxplot(mi1, ax=ax_box1, color='b') sns.boxplot(mi2, ax=ax_box2, color='r') ax_box1.axvline(mi1_mean, color='g', linestyle='--') ax_box2.axvline(mi2_mean, color='m', linestyle='--') plt.subplots_adjust(top=0.87) plt.suptitle('mutual information n=' + str(len(cc1)), fontsize = 16) sns.distplot(mi1, ax=ax_dist, label='rtf', color='b', norm_hist=True) sns.distplot(mi2, ax=ax_dist, label='rtm', color='r', norm_hist=True) ax_dist.axvline(mi1_mean, color='g', linestyle='--') ax_dist.axvline(mi2_mean, color='m', linestyle='--') plt.legend() ax_box1.set(xlabel='') ax_box2.set(xlabel='') plt.savefig('/home/jeonj1/proj/mi/mi_box_distplot.png')  The following code above will generate two joint plots that combine the box plot and distribution plot for correlation coefficient and mutual information. The first image below shows the correlation coefficient distribution (note that the max is at 1.00). The N here represents the total number of scan images that were compared.\nThe image below is what we\u0026rsquo;re really interested in (!The title should be changed to MI!). You can see the values range from 0.6~1.4. Also, it shows evidence that RTF version has outliers depicted in the box plot, but the outlier is moderated with the RTM method.\nReferences \u0026amp; Useful Links https://people.csail.mit.edu/fisher/publications/papers/tsai99.pdf\nhttp://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.87.2130\u0026amp;rep=rep1\u0026amp;type=pdf\nhttps://matthew-brett.github.io/teaching/mutual_information.html#t1-t2-scatter\n","date":1580428800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1580428800,"objectID":"07e51c17ae840c1cb8f4003f630747d1","permalink":"https://jinjeon.me/post/mutual-info/","publishdate":"2020-01-31T00:00:00Z","relpermalink":"/post/mutual-info/","section":"post","summary":"Using mutual information to compare and plot the different registration types in neuroimaging data preprocessing steps","tags":["mutual information","neuroimaging","python","entropy"],"title":"Information Theory: Mutual Information","type":"post"},{"authors":null,"categories":null,"content":"In prep for fMRI neuroimaging processing and building classifier\n","date":1543622400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1543622400,"objectID":"a68fa4468003b45c0900a3c396f2b82d","permalink":"https://jinjeon.me/post/fmri/","publishdate":"2018-12-01T00:00:00Z","relpermalink":"/post/fmri/","section":"post","summary":"Click to see my brain in .gif for now 🧠","tags":["fmri","brain"],"title":"fMRI Neuroimaging \u0026 Classifier Coming Soon...","type":"post"},{"authors":null,"categories":null,"content":" See full repo at https://github.com/jeon11/use-glove-narrative.git Note: The results are shown in the poster\nOverview Google\u0026rsquo;s Universal Sentence Encoder (USE) provides 512-dimension vectors for each input that are pre-trained on large corpus, and can be plugged into a variety of different task models, such as sentiment analysis, classification, and etc. It is speed-efficient without losing task accuracy, and also provides embeddings not just for word level, but also for phrases, sentences, and even paragraphs. However, the more the words are given as input, the more likely each word meaning gets diluted.\nThis notebook is based on the Semantic Similarity with TF-Hub Universal Encoder tutorial, but uses a separate input from one of the projects. We will also use GloVe vectors to compare how the vectors and cosine similarity differ between the two models.\n First, the notebook goes over setting up locally and use one sample data to create embeddings saved out as a separate csv file using Pandas.\n Then assuming you have cloned the repository, we call in custom functions to quickly extract vectors of given word, phrase, sentences in USE and GloVe.\n  Table of Contents/Short-cuts:  About USE Models and Deep Average Network Installation \u0026amp; Setup Path Setup Raw Data Format Get USE Embeddings Cosine Similarity Cosine Similarity Examples Plotting Similarity Matrix  About USE Models and Deep Average Network There are two types of models in USE: Transformer and Deep Averaging Network (DAN). We will use DAN which is a lighter version for efficiency and speed in exchange for reduced accuracy (still accurate enough).\nDAN first averages the input word embeddings to create a sentence embedding. It uses PTB tokenizer, which divides a sentence into a sequence of tokens based on set of rules on how to process punctuation, articles, etc, in order to create 512 dimension embeddings. This averaged 512 vector is passed to one or more feedforward layers. Then it is multi-task-trained on unsupervised data drawn from various internet sources, Wikipedia, Stanford Natural Language Inference corpus, web news, and forums. - Training goals: - Uses skip-thought-like model that predicts the surrounding sentences of a given text (see below) - Conversational response suggestion - Classification task on supervised data\nThe intuition behind deep feedforward neural network is that each layer learns a more abstract representation of the input than the previous one. So its depth allows to capture subtle variations of the input with more depths. Also, each layer only involves a single matrix multiplication, allowing minimal computing time.\nSee full USE paper: https://arxiv.org/pdf/1803.11175.pdf See full DAN paper: https://people.cs.umass.edu/~miyyer/pubs/2015_acl_dan.pdf\nInstallation \u0026amp; Setup I used Anaconda to create a TensorFlow-specific environment to customize the package versions. After installing Anaconda\u0026hellip;\n Creating a new environment:\nconda create -n py3 python=3.6.8  Activate the created environment by conda activate py3\n Using pip, install packages for pandas, numpy, seaborn, tensorflow, tensorflow_hub. ie. pip install pckge-name\n Then, let\u0026rsquo;s make sure to set the packages to exact version:\npip install --upgrade tensorflow=1.15.0 pip install --upgrade tensorflow-hub=0.7.0   Once the steps are done, we should be able to run the codes locally.\nfrom absl import logging import tensorflow as tf import tensorflow_hub as hub import matplotlib.pyplot as plt import numpy as np import os import pandas as pd from glob import glob import re import seaborn as sns  Note: due to some depecrated methods and changes made with the tf version upgrade from tf1.X to tf2.0, here we use a specific set of Python and tf versions. You can check via pip freeze\n tested on python == 3.6.8 | tensorflow == 1.15.0 | tensorflow_hub == 0.7.0  Or you can check the version in Python via:\nimport sys print(sys.version_info) # sys.version_info(major=3, minor=6, micro=8, releaselevel='final') print(tf.__version__) # '1.15.0' print(hub.__version__) # '0.7.0'  # script variables # for lite/DAN version: module_url = \u0026quot;https://tfhub.dev/google/universal-sentence-encoder/2\u0026quot; # for heavy/Transformer version: # module_url = \u0026quot;https://tfhub.dev/google/universal-sentence-encoder-large/3\u0026quot; baseDir = 'use-glove-narrative' # repository/base folder name embedding_size = 512 # base 512-dimension embedding  Path Setup Assuming that you git cloned the project (which is for demo purposes) to your local directory, we set the path so the code knows where to look for certain data files using the baseDir specified above. We will mainly just work within the cloned folder.\npwd = os.getcwd() # recursively find absolute path while os.path.basename(pwd) != baseDir: os.chdir('..') pwd = os.getcwd() baseDir = pwd dataDir = baseDir + '/data' # recursively find all csv files. We will work with one file here all_csvs = [y for x in os.walk(dataDir) for y in glob(os.path.join(x[0], '*.csv'))] all_csvs.sort() all_csvs = all_csvs[0] # we will just use one sample data  Raw Data Format To briefly show the data, the data is comprised of numerous idea units, or phrases of words with unique meanings. Here, we are only interested in the \u0026lsquo;text\u0026rsquo; column and \u0026lsquo;index\u0026rsquo; column. We will call in the text of the entire story to create embeddings for each idea unit. Below the example print out, we will loop over each story to create embeddings. Since we will use one story this time, it shouldn\u0026rsquo;t take that long.\n# an example print of data format datafile = pd.read_csv(all_csvs) datafile.head()   .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    paragraph index text scoring     0 1 1 One fine day an old Maine man was fishing mentions at least 3 of the following: “old”, “...   1 1 2 on his favorite lake mentions “favorite lake” or “favorite river”   2 1 3 and catching very little. mentions that he/the fisherman was not having ...   3 1 4 Finally, he gave up mentions that he gave up/stopped fishing   4 1 5 and walked back along the shore to his fishing... mentions that he walked home/to his fishing sh...     Get USE Embeddings # let's read in the data file textfile = pd.read_csv(all_csvs) # get the title of the narrative story, cutting out the .csv extension title = os.path.basename(all_csvs)[:-4] # create df to save out at the end vector_df_columns = ['paragraph', 'index', 'text', 'size'] # create column for each dimension (out of 512) for i in range(1, embedding_size + 1): vector_df_columns.append('dim' + str(i)) vector_df = pd.DataFrame(columns=vector_df_columns) # import the Universal Sentence Encoder's TF Hub module embed = hub.Module(module_url) # hub.load(module_url) for tf==2.0.0 # we call in the text column from data file messages = [] for t in range(0, len(textfile)): messages.append(textfile.iloc[t]['text'])  # Reduce logging output. logging.set_verbosity(logging.ERROR) with tf.compat.v1.Session() as session: session.run([tf.compat.v1.global_variables_initializer(), tf.compat.v1.tables_initializer()]) message_embeddings = session.run(embed(messages)) # make sure all units are there/sanity check assert len(message_embeddings) == len(textfile) == len(messages) # loop over each vector value to corresponding text for e in range(0, len(message_embeddings)): vector_df.at[e, 'paragraph'] = textfile.iloc[e]['paragraph'] vector_df.at[e, 'index'] = textfile.iloc[e]['index'] vector_df.at[e, 'text'] = messages[e] vector_df.at[e, 'size'] = len(message_embeddings[e]) for dim in range(0, len(message_embeddings[e])): vector_df.at[e, 'dim'+str(dim+1)] = message_embeddings[e][dim] # display sample format vector_df.head()  INFO:tensorflow:Saver not created because there are no variables in the graph to restore INFO:tensorflow:Saver not created because there are no variables in the graph to restore   .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    paragraph index text size dim1 dim2 dim3 dim4 dim5 dim6 ... dim503 dim504 dim505 dim506 dim507 dim508 dim509 dim510 dim511 dim512     0 1 1 One fine day an old Maine man was fishing 512 0.0169429 -0.0030699 -0.0156278 -0.00649163 0.0213989 -0.0541645 ... 0.0404136 -0.0577177 0.0108959 -0.0337963 0.0817816 -0.074783 0.0231454 0.0719041 -0.047105 0.0127639   1 1 2 on his favorite lake 512 -0.0172151 0.0418602 0.0105562 0.0290091 0.0351211 -0.0121579 ... 0.0319399 -0.0201722 -0.00480706 -0.0490393 0.0562807 -0.0840528 0.0359073 0.0519214 0.0635523 -0.0615548   2 1 3 and catching very little. 512 0.0515628 0.00556853 -0.0606079 -0.0281095 -0.0631535 -0.0586548 ... -0.0266129 0.0111167 -0.0238963 0.00741908 -0.0685881 -0.0858848 0.066858 -0.0616563 -0.0844253 -0.026685   3 1 4 Finally, he gave up 512 0.0818241 0.00549721 -0.0245033 0.0286504 -0.0284165 -0.0575481 ... 0.0474779 -0.00603216 -0.0116888 -0.06419 0.0268704 -0.0640136 0.103409 -0.0235997 -0.0781731 -0.0365196   4 1 5 and walked back along the shore to his fishing... 512 0.00286058 0.0576001 0.0103945 -0.00301533 0.0199591 -0.0644398 ... -0.0145959 0.0137776 0.0165417 -0.0406641 -0.0204453 -0.0713526 0.0121754 0.00591647 0.0262764 -0.0329477    5 rows × 516 columns\n print(np.shape(vector_df))  (0, 516)  The sample data shows each idea unit/text converted to 512 dimension vectors. np.shape(vector_df) will return a 41 total idea units/phrases to 516 columns (512 dimensions + custom columns (paragraph info, index, text, and size)). We then use these vectors to explore semantic similarity between text and phrases.\n# run the code below to save out as csv file vector_df.reindex(columns=vector_df_columns) vector_df.to_csv(title + '_vectors.csv', index=False)  Cosine Similarity As a brief description, cosine similarity is basically the measure of cosine angle between the two vectors. Since we have USE and GloVe vectors that represent words into multidimensional vectors, we can apply these vector values to calculate how similar the two words are.\nIt can be easily calculated in Python with its useful packages:\ncos_sim = numpy.dot(vector1, vector2)/(numpy.linalg.norm(vector1) * numpy.linalg.norm(vector2))  Assuming we established some basic understanding, let\u0026rsquo;s call in the functions I made so that we can easily get USE and GloVe vectors at multiple word level.\nI will highlight some of the functions below:\nfrom get_glove_use import * help(glove_vec) help(use_vec)  Help on function glove_vec in module get_glove_use: glove_vec(item1, item2) get vectors for given two words and calculate cosine similarity Parameters ---------- item1 : str string in glove word pool vector to compare item2 : str string in glove word pool vector to compare Returns ------- item1_vector : array item1 GloVe vector item2_vector : array item2 GloVe vector cos_sim : float cosine similarity of item1 and item2 vectors Help on function use_vec in module get_glove_use: use_vec(item1, item2) get USE vectors and cosine similairty of the two items Parameters ---------- item1 : str, list any word to compare, put in string for more than one word item2 : str, list any word to compare, put in string for more than one word Returns ------- item1_vector : array item1 USE vector item2_vector : array item2 USE vector cos_sim : float cosine similarity of item1 and item2 vectors  Cosine Similarity Example Using the two functions above, and another function compare_word_vec (which basically uses the two functions), we can easily obtain cosine similarity of two words.\n# using the two functions above, we can get # GloVe and USE vectors and cosine similarity of two input words os.chdir(gloveDir) _, _, glove_sim = glove_vec('fish','bear') _, _, use_sim = use_vec('fish','bear') print('use cos: ' + str(use_sim)) print('glove cos: ' + str(glove_sim))  INFO:tensorflow:Saver not created because there are no variables in the graph to restore INFO:tensorflow:Saver not created because there are no variables in the graph to restore 0.11964830574261577 0.5305143  # the two functions glove_vex and use_vec are use in compare_word_vec compare_word_vec('man','fish')  INFO:tensorflow:Saver not created because there are no variables in the graph to restore INFO:tensorflow:Saver not created because there are no variables in the graph to restore use cos: 0.49838725 glove cos: 0.18601566881803455  Note: From the example above, USE and GloVe similarly identy fish to be somewhat equally similar to bear and man (but just in different scale/degree).\nNow let\u0026rsquo;s try comparing at multiple words or phrase level. We will use new functions and give in new inputs as strings.\nsentence1 = ['old', 'man', 'caught', 'fish'] sentence2 = ['bear', 'hunted', 'trout'] sentence3 = ['bear','eat','six','fish'] print('old man caught fish \u0026amp; bear hunted trout:') phrase_vec(sentence1, sentence2) print('old man caught fish \u0026amp; bear eat six fish:') phrase_vec(sentence1, sentence3) print('bear hunted trout \u0026amp; bear eat six fish:') phrase_vec(sentence2, sentence3)  old man caught fish \u0026amp; bear hunted trout: INFO:tensorflow:Saver not created because there are no variables in the graph to restore INFO:tensorflow:Saver not created because there are no variables in the graph to restore glove sim: 0.36609688461789297 USE sim: 0.50494814 old man caught fish \u0026amp; bear eat six fish: INFO:tensorflow:Saver not created because there are no variables in the graph to restore INFO:tensorflow:Saver not created because there are no variables in the graph to restore glove sim: 0.6818474640845398 USE sim: 0.5896743 bear hunted trout \u0026amp; bear eat six fish: INFO:tensorflow:Saver not created because there are no variables in the graph to restore INFO:tensorflow:Saver not created because there are no variables in the graph to restore glove sim: 0.6082457470353315 USE sim: 0.72352856  Note: From the example above, we can see that USE and GloVe capture somewhat differently. We can see that bear hunted trout and bear eat six fish are the most similar to each other, whereas old man caught fish is also similar to the context of bear eating six fish.\nMore detailed analysis is required, but the example above shows great possibilities to exploring semantics.\nPlotting Similarity Matrix Now that we can compare similarity of words and sentences, we can plot a simple pairwise matrix, which basically compares how similar each word is to another in the given list. Fortunately, we already have a plot for doing it (using Seaborn).\nI will only use few words as demonstration, since it\u0026rsquo;s been slowing up my computer so much!\nplot_sim_matrix(['man', 'bear', 'fish', 'trout'])  INFO:tensorflow:Saver not created because there are no variables in the graph to restore INFO:tensorflow:Saver not created because there are no variables in the graph to restore  Ending Note In the example above, we only used simple noun words. The stronger blue color, the more similar the two words are. Thus, the diagonal strip is deep blue (similarity of same two words is 1). You can see fish and trout are more similar to each other, than is man to trout.\nKeep in mind that you can feed in more words and sentences to create and visualize a larger matrix.\nWe looked at setting up USE locally, and creating embeddings from USE. The cloned project also has sample version of GloVe vectors. We use the vectors from the two models to extract vectors and compare similarity of two texts.\n","date":1541030400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1541030400,"objectID":"7a4f6295ae0d4e8a6165d80d69954fad","permalink":"https://jinjeon.me/post/vectorspace/","publishdate":"2018-11-01T00:00:00Z","relpermalink":"/post/vectorspace/","section":"post","summary":"From setting up TensorFlow to creating vectors and cosine similarity","tags":["tensorflow","python","vectorspace","semantics","research"],"title":"Universal Sentence Encoder and GloVe on Narrative Semantic Representation","type":"post"},{"authors":null,"categories":null,"content":" Note: This post is a ported version of Jupyter Notebook from my mne-eeg project: https://github.com/jeon11/mne-egi/blob/master/walkthrough_advanced.ipynb/walkthrough_basics.ipynb Advanced Processing In the previous walkthrough notebook, we got to manually inspect raw instance and do some cleaning based on annotations and creating evoked responses from time-locked events.\nIn this section, we run independent component analysis (ICA) on the epochs we had from the last notebook. We look in ICs to identify potentially bad components with eye related artifcats. Then, we implement autoreject (http://autoreject.github.io) which automatically attempts to find bad channels and interpolate those based on nearby channels. At the end, we plot the ERPs by channels that we are interested in looking and make comparison.\nNote that the plots below will be using print statements for demonstration purposes.\nimport mne import pandas as pd import numpy as np from matplotlib import pyplot as plt import Tkinter from autoreject import AutoReject from autoreject import get_rejection_threshold from mne.preprocessing import ICA  Loading epochs We imported all the necessary dependencies. Now we load the saved epochs from last notebook.\nepochs_tlstS = mne.read_epochs('/data/epochs_tlsts-epo.fif', preload=True) print(epochs_tlstS)  \u0026lt;EpochsFIF | 388 events (all good), -0.25 - 0.8 sec, baseline [-0.25, 0], ~72.8 MB, data loaded, with metadata, u'lstS': 388\u0026gt;  Running Independent Component Analysis (ICA) ICA is a signal processing method to decompose signals into independent sources from a mixed signal. A representative example is the cocktail party effect, which is a phenomenon in which you are able to concentrate on the voice of the speaker you are conversing with regardless of the various background noise in a party. Using ICA helps seperate the different sources of mixed sound, under the assumption that the sound components are linear. This method works for EEG signal preprocessing because we assume that each electrode is independent from the others. To think of it easily, I consider ICA as decomposing the data into multiple layers, and by excluding bad ICs, we filter the data.\n# the function calculates optimal reject threshold for ICA reject = get_rejection_threshold(epochs_tlstS) print(reject)  Estimating rejection dictionary for eeg Estimating rejection dictionary for eog {'eeg': 0.0007759871430524497, 'eog': 5.903189072009943e-05}  Low-frequency slow drifts Because ICA is sensitive to low-frequency slow drifts, it is recommended that 1Hz highpass filter is applied. Since this was already done to our raw instance in the previous notebook, it can be skipped. You can double check as below, or apply the highpass filter if you haven\u0026rsquo;t already.\n# double check highpass filter print(epochs_tlstS.info['highpass']) # epochs_tlstS.info['highpass'] = 1  1.0  Fit ICA Now we will run ICA on our epoch data. For simplicity and time sake, we will limit the number of components to 20 with fastICA method, which is the generally used one. The number of ICs can be created up to as many electrodes (in this case 128 - bad channels). In ica1.fit, we use the recommended reject threshold from Autoreject.\nica = ICA(n_components=20, max_pca_components=None, n_pca_components=None, noise_cov=None, random_state=None, method='fastica', fit_params=None, max_iter=200, verbose=None) print('fitting ica...') ica.fit(epochs_tlstS, reject=reject)  fitting ica... /Users/Jin/Library/Python/2.7/lib/python/site-packages/scipy/linalg/basic.py:1321: RuntimeWarning: internal gelsd driver lwork query error, required iwork dimension not returned. This is likely the result of LAPACK bug 0038, fixed in LAPACK 3.2.2 (released July 21, 2010). Falling back to 'gelss' driver. x, resids, rank, s = lstsq(a, b, cond=cond, check_finite=False) \u0026lt;ICA | epochs decomposition, fit (fastica): 81868 samples, 20 components, channels used: \u0026quot;eeg\u0026quot;\u0026gt;  Artifact detection using ICA correlation plot_sources can show the signals of each ICs. We can manually inspect for ICs with noise, or identify bad ICs that correlates with oscillations from eye-related channels. We use the builtin find_bads_eog from ICA class.\nplot_scores will show the correlation values for each component, and mark the ones that are potentially bad with red. Note that because we only specified 20 components, the decomposition is rather compressed.\neog_inds, scores = ica.find_bads_eog(epochs_tlstS) print('suggested eog component: ' + str(eog_inds)) print(ica.plot_scores(scores, exclude=eog_inds, labels='eog'))  suggested eog component: [3]  Figure(460.8x194.4)  The find_bads_eog suggested that component \u0026lsquo;3\u0026rsquo; is bad IC related to eye-related artifact. We can plot that specific component to inspect manually.\nprint(ica.plot_properties(epochs_tlstS, picks=eog_inds, psd_args={'fmax': 35.}, image_args={'sigma': 1.})) ica.exclude += eog_inds print(ica.exclude)  /Users/Jin/Library/Python/2.7/lib/python/site-packages/mne/transforms.py:689: RuntimeWarning: invalid value encountered in divide out[:, 2] = np.arccos(cart[:, 2] / out[:, 0])  [\u0026lt;Figure size 504x432 with 5 Axes\u0026gt;] [3]  Usually, eye blinks are characterized as having significantly polar activities between the frontal and the posterior regions with high activity in the frontal region (ie. eyes). Also, activities shown in the frontal region, especially near the eye area, would not be helpful in our analysis. Eye movements are characterized as having significantly split activities between left and right. Component above does seem containing eye blinks, we mark that component bad by ica.exclude and we can see that component has been added.\nWe can also manually inspect for other components using plot_components besides the ones that the builtin method suggested. You can see that the component speficied above being grayed out as a bad IC. The plot prioritizes showing ICs with large activations and polarity, which means that most of the bad ICs could be found in the early ICs.\nprint(ica.plot_components(inst=epochs_tlstS))  [\u0026lt;Figure size 540x504 with 20 Axes\u0026gt;]  When running the code on ipython as suggested in the previous notebook, the plot is actually interactive. By clicking on the component, it shows the component properties. Clicking on the name of the component will gray out the name and be marked as bad IC. Here, it seems components 2, 14, and 18 have high activation in the eye regions, which could be identified as components with eye blinks. Also, componnent 5 has activation in the frontal region, and has polar activities between left and right, which could potentially be eye movements. Because the plot above is not interactive, we will specify which ICs to exclude as a line of code.\nSince we\u0026rsquo;ve identified the bad ICs, we can apply it to our epochs_tlstS, and proceed to autoreject.\nica.exclude += [0, 2, 5, 14, 18] print(ica.exclude) ica.apply(epochs_tlstS) print('number of ICs dropped: ' + str(len(ica.exclude)))  [3, 0, 2, 5, 14, 18] number of ICs dropped: 6  Autoreject Now that we have bad ICs identified, we try implementing autoreject for cleaning. Note that the step below may take some time as it tries find bad channels and fix them.\nar = AutoReject() epochs_clean = ar.fit_transform(epochs_tlstS)  Running autoreject on ch_type=eeg [........................................] 100.00% Creating augmented epochs \\ Computing thresholds ... [Parallel(n_jobs=1)]: Done 1 out of 1 | elapsed: 2.4s remaining: 0.0s [Parallel(n_jobs=1)]: Done 2 out of 2 | elapsed: 4.0s remaining: 0.0s [Parallel(n_jobs=1)]: Done 3 out of 3 | elapsed: 5.5s remaining: 0.0s [Parallel(n_jobs=1)]: Done 4 out of 4 | elapsed: 7.3s remaining: 0.0s [Parallel(n_jobs=1)]: Done 5 out of 5 | elapsed: 10.5s remaining: 0.0s [Parallel(n_jobs=1)]: Done 6 out of 6 | elapsed: 13.2s remaining: 0.0s [Parallel(n_jobs=1)]: Done 7 out of 7 | elapsed: 16.4s remaining: 0.0s [Parallel(n_jobs=1)]: Done 8 out of 8 | elapsed: 19.5s remaining: 0.0s [Parallel(n_jobs=1)]: Done 9 out of 9 | elapsed: 21.7s remaining: 0.0s [Parallel(n_jobs=1)]: Done 10 out of 10 | elapsed: 24.6s remaining: 0.0s [Parallel(n_jobs=1)]: Done 11 out of 11 | elapsed: 27.5s remaining: 0.0s [Parallel(n_jobs=1)]: Done 12 out of 12 | elapsed: 30.3s remaining: 0.0s [Parallel(n_jobs=1)]: Done 13 out of 13 | elapsed: 33.4s remaining: 0.0s [Parallel(n_jobs=1)]: Done 14 out of 14 | elapsed: 35.4s remaining: 0.0s [Parallel(n_jobs=1)]: Done 15 out of 15 | elapsed: 36.8s remaining: 0.0s [Parallel(n_jobs=1)]: Done 16 out of 16 | elapsed: 38.4s remaining: 0.0s [Parallel(n_jobs=1)]: Done 17 out of 17 | elapsed: 40.2s remaining: 0.0s [Parallel(n_jobs=1)]: Done 18 out of 18 | elapsed: 42.2s remaining: 0.0s [Parallel(n_jobs=1)]: Done 19 out of 19 | elapsed: 44.8s remaining: 0.0s [Parallel(n_jobs=1)]: Done 20 out of 20 | elapsed: 47.0s remaining: 0.0s [Parallel(n_jobs=1)]: Done 21 out of 21 | elapsed: 48.7s remaining: 0.0s [Parallel(n_jobs=1)]: Done 22 out of 22 | elapsed: 50.1s remaining: 0.0s [Parallel(n_jobs=1)]: Done 23 out of 23 | elapsed: 51.6s remaining: 0.0s [Parallel(n_jobs=1)]: Done 24 out of 24 | elapsed: 53.1s remaining: 0.0s [Parallel(n_jobs=1)]: Done 25 out of 25 | elapsed: 54.8s remaining: 0.0s [Parallel(n_jobs=1)]: Done 26 out of 26 | elapsed: 56.4s remaining: 0.0s [Parallel(n_jobs=1)]: Done 27 out of 27 | elapsed: 57.9s remaining: 0.0s [Parallel(n_jobs=1)]: Done 28 out of 28 | elapsed: 59.8s remaining: 0.0s [Parallel(n_jobs=1)]: Done 29 out of 29 | elapsed: 1.0min remaining: 0.0s [Parallel(n_jobs=1)]: Done 30 out of 30 | elapsed: 1.1min remaining: 0.0s [Parallel(n_jobs=1)]: Done 31 out of 31 | elapsed: 1.1min remaining: 0.0s [Parallel(n_jobs=1)]: Done 32 out of 32 | elapsed: 1.1min remaining: 0.0s [Parallel(n_jobs=1)]: Done 33 out of 33 | elapsed: 1.1min remaining: 0.0s [Parallel(n_jobs=1)]: Done 34 out of 34 | elapsed: 1.2min remaining: 0.0s [Parallel(n_jobs=1)]: Done 35 out of 35 | elapsed: 1.2min remaining: 0.0s [Parallel(n_jobs=1)]: Done 36 out of 36 | elapsed: 1.2min remaining: 0.0s [Parallel(n_jobs=1)]: Done 37 out of 37 | elapsed: 1.2min remaining: 0.0s [Parallel(n_jobs=1)]: Done 38 out of 38 | elapsed: 1.3min remaining: 0.0s [Parallel(n_jobs=1)]: Done 39 out of 39 | elapsed: 1.3min remaining: 0.0s [Parallel(n_jobs=1)]: Done 40 out of 40 | elapsed: 1.3min remaining: 0.0s [Parallel(n_jobs=1)]: Done 41 out of 41 | elapsed: 1.4min remaining: 0.0s [Parallel(n_jobs=1)]: Done 42 out of 42 | elapsed: 1.4min remaining: 0.0s [Parallel(n_jobs=1)]: Done 43 out of 43 | elapsed: 1.4min remaining: 0.0s [Parallel(n_jobs=1)]: Done 44 out of 44 | elapsed: 1.4min remaining: 0.0s [Parallel(n_jobs=1)]: Done 45 out of 45 | elapsed: 1.5min remaining: 0.0s [Parallel(n_jobs=1)]: Done 46 out of 46 | elapsed: 1.5min remaining: 0.0s [Parallel(n_jobs=1)]: Done 47 out of 47 | elapsed: 1.5min remaining: 0.0s [Parallel(n_jobs=1)]: Done 48 out of 48 | elapsed: 1.6min remaining: 0.0s [Parallel(n_jobs=1)]: Done 49 out of 49 | elapsed: 1.6min remaining: 0.0s [Parallel(n_jobs=1)]: Done 50 out of 50 | elapsed: 1.6min remaining: 0.0s [Parallel(n_jobs=1)]: Done 115 out of 115 | elapsed: 3.8min finished [........................................] 100.00% n_interp \\ chs | Estimated consensus=0.30 and n_interpolate=4 [........................................] 100.00% Repairing epochs |  The above created a new epochs called epochs_clean. We can compare how the epochs are cleaned by comparing the two plots. For demonstration, we only plot the epochs_clean. The plot shows individual epochs with green line being 0 (the onset of the word in the experiment). In the interactive plot mode, you can scroll vertically to see different channels and horizontally to search through epochs.\nprint(epochs_clean.plot())  Figure(869.6x536.8)  Creating evoked response from epochs_clean Now that we have a new, ideally cleaner epochs, we create evoked response for each condition. Currently, epochs_clean contains all four conditions with approximately 100 epochs for each (less than 400 now because epochs been rejected). Note that the y-axis microvolt scale has been refined compared to our previous notebook.\n# now let's create a new evoked responses (ie. the autoreject evoked) arevoked_tlst_c1 = epochs_clean[\u0026quot;label=='lstS' and cond=='1'\u0026quot;].average() arevoked_tlst_c2 = epochs_clean[\u0026quot;label=='lstS' and cond=='2'\u0026quot;].average() arevoked_tlst_c3 = epochs_clean[\u0026quot;label=='lstS' and cond=='3'\u0026quot;].average() arevoked_tlst_c4 = epochs_clean[\u0026quot;label=='lstS' and cond=='4'\u0026quot;].average() # let's see a sample evoked response print(arevoked_tlst_c1.plot_joint(times='peaks'))  Figure(576x302.4)  Plotting ERP comparison Now that we have evoked response for each condition, we can look into specific channels of interest to see how the signals differ by conditions. For the selection list, we will only specify channel E92 as it will create 4 graphs for each channel.\n# we specify which channels to look at selection = ['E92'] # ['EB','E11','E24','E124','E36','E104','E52','E62','E92'] picks_select = mne.pick_types(epochs_clean.info, meg=False, eeg=True, eog=True, stim=False, exclude='bads', selection=selection) # create dictionary for each condition evoked_dict = {'highcosval': arevoked_tlst_c1, 'lowcosval': arevoked_tlst_c2, 'highcosinval': arevoked_tlst_c3, 'lowcosinval': arevoked_tlst_c4} picks_select = mne.pick_types(arevoked_tlst_c1.info, meg=False, eeg=True, eog=True, stim=False, exclude='bads', selection=selection) # this will plot each selected channel with comparison of two conditions title = '%s_vs_%s_E%s.png' for i in range(0, len(picks_select)): fig1 = mne.viz.plot_compare_evokeds({'highcos/val':evoked_dict['highcosval'], 'lowcos/val':evoked_dict['lowcosval']}, picks=picks_select[i]) fig2 = mne.viz.plot_compare_evokeds({'highcos/inval':evoked_dict['highcosinval'], 'lowcos/inval':evoked_dict['lowcosinval']}, picks=picks_select[i]) fig3 = mne.viz.plot_compare_evokeds({'highcos/val':evoked_dict['highcosval'], 'highcos/inval':evoked_dict['highcosinval']},picks=picks_select[i]) fig4 = mne.viz.plot_compare_evokeds({'lowcos/val':evoked_dict['lowcosval'], 'lowcos/inval':evoked_dict['lowcosinval']}, picks=picks_select[i]) # save figs # fig1.savefig(title % (evoked_dict.keys()[0], evoked_dict.keys()[1], i)) # fig2.savefig(title % (evoked_dict.keys()[2], evoked_dict.keys()[3], i)) # fig3.savefig(title % (evoked_dict.keys()[0], evoked_dict.keys()[2], i)) # fig4.savefig(title % (evoked_dict.keys()[1], evoked_dict.keys()[3], i))  # this will plot just the evoked responses per conditions with all channels fig5 = arevoked_tlst_c1.plot(titles='cond1: high cos/val') fig6 = arevoked_tlst_c2.plot(titles='cond2: low cos/val') fig7 = arevoked_tlst_c3.plot(titles='cond3: high cos/inval') fig8 = arevoked_tlst_c4.plot(titles='cond4: low cos/inval') # save figs # fig5.savefig('c1all.png') # fig6.savefig('c2all.png') # fig7.savefig('c3all.png') # fig8.savefig('c4all.png')  Sources and useful links EEGLab ICA guide: https://sccn.ucsd.edu/wiki/Chapter_09:_Decomposing_Data_Using_ICA\nMNE ICA class: https://martinos.org/mne/stable/generated/mne.preprocessing.ICA.html\nautoreject: http://autoreject.github.io/auto_examples/plot_auto_repair.html#sphx-glr-auto-examples-plot-auto-repair-py\nClemens Brunner\u0026rsquo;s great guide on ICA: https://cbrnr.github.io/2018/01/29/removing-eog-ica/\nClemens Brunner\u0026rsquo;s great guide on EOG detection using linear regression: https://cbrnr.github.io/2017/10/20/removing-eog-regression/\nMNE stats: https://martinos.org/mne/stable/auto_tutorials/plot_stats_cluster_erp.html#sphx-glr-auto-tutorials-plot-stats-cluster-erp-py\n","date":1525219200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1525219200,"objectID":"a8fa2f40e29fb9bac38d1afe68ac5f18","permalink":"https://jinjeon.me/post/eeg-advanced/","publishdate":"2018-05-02T00:00:00Z","relpermalink":"/post/eeg-advanced/","section":"post","summary":"Continuation from Part 1, the script runs independent component analysis and automatic epoch rejection, and plots improved ERP","tags":["eeg","research","python","signal processing"],"title":"EEG/Signal Processing--Advanced Part 2","type":"post"},{"authors":null,"categories":null,"content":" Note: This post is a ported version of Jupyter Notebook from my mne-eeg project: https://github.com/jeon11/mne-egi/blob/master/walkthrough_basics.ipynb Overview This script runs through sample experiment data from manually reading in raw file to preprocessing through applying filters, eye blink detection using peak finding techniques. Then we create epochs and plot evoked responses.\nIn the advanced walkthrough: walkthrough_advanced.ipynb, we implement independent component analysis (ICA) and autoreject, which is an automated tool for fixing data, to see how the epochs are improved and compare the evoked responses by conditions.\nThe script requires at least two files: - the raw data (download from Google Drive ~500MB) - exported event text log from NetStation software\nRunning the script in command line When running the Python script from command line, MNE recommends using ipython via:\nipython —-pylab osx -i mne-egi-walkthrough.py  For Windows, instead of osx, you would be specifying qt.\nImporting Let\u0026rsquo;s begin by importing all the necessary modules. Make sure you have all the required dependencies setup.\nimport mne import pandas as pd import numpy as np import matplotlib from matplotlib import pyplot as plt from mne.preprocessing import eog from mne.preprocessing import create_eog_epochs from mne.preprocessing.peak_finder import peak_finder import Tkinter import extract_nslog_event  Setting basic variables Before we begin any preprocessing, we create variables here to specify what we want to look for. The whole script basically requires two main files. 1. raw_fname: The raw instance of eeg data file in .raw format 2. ns_eventlog: Netstation\u0026rsquo;s event exports in text\nThe selection variable is later used to specify which channels to plot and compare. Note, the first item in the selection list, EB channel is a virtual channel created from bipolar referene.\n# specify sample subject data directory raw_fname = '/Users/Jin/Documents/MATLAB/research/mne-egi/data/sfv_eeg_011ts.raw' ns_eventlog = '/Users/Jin/Documents/MATLAB/research/mne-egi/data/sfv_eeg_011ts_nsevent' # specify sub-sample of channels to look in detail selection = ['EB','E11','E24','E124','E36','E104','E52','E62','E92']  Reading in raw file Raw eeg data can be read in with a simple line below. You can specify montage kind in strings. See https://martinos.org/mne/dev/generated/mne.channels.read_montage.html for available montages. We set preload=True because some of the preprocessing functions require raw file to be preloaded.\nOnce the raw file is loaded, typing raw and raw.info will show details about the raw instance.\nprint('reading raw file...') raw = mne.io.read_raw_egi(raw_fname, montage='GSN-HydroCel-128', preload=True) print('Done!')  reading raw file... \u0026lt;ipython-input-3-8bc42ae4bead\u0026gt;:2: RuntimeWarning: The following EEG sensors did not have a position specified in the selected montage: ['E129']. Their position has been left untouched. raw = mne.io.read_raw_egi(raw_fname, montage='GSN-HydroCel-128', preload=True) Done!  print(raw) # see the first ten list of channel names (note by default, prefix 'E' is appended) print(raw.info['ch_names'][0:10]) # see highpass \u0026amp; lowpass filter print('highpass filter: ' + str(raw.info['highpass'])) print('lowpass filter: ' + str(raw.info['lowpass']))  \u0026lt;RawEGI | sfv_eeg_011ts.raw, n_channels x n_times : 136 x 989490 (4947.4 sec), ~1.00 GB, data loaded\u0026gt; ['E1', 'E2', 'E3', 'E4', 'E5', 'E6', 'E7', 'E8', 'E9', 'E10'] highpass filter: 0.0 lowpass filter: 100.0  Applying bandpass filter Our first preprocessing step will be applying the bandpass filter of 1Hz and 30Hz. The numbers can be played around with, but this filter range will potentially remove general noise from environment and slow drifting signals. Other suggestions for highpass is 0.1; for 40 Hz lowpass.\nAfter bandpass filter is applied, type raw.info to check how raw.filter made changes.\n# apply bandpass filter to raw file (highpass, lowpass) raw.filter(1,30) # see highpass \u0026amp; lowpass filter print('highpass filter: ' + str(raw.info['highpass'])) print('lowpass filter: ' + str(raw.info['lowpass']))  highpass filter: 1.0 lowpass filter: 30.0  Creating meta dataframe We will deviate a little from processing raw file, and construct a dataframe that can be later used for effectively creating epochs or querying information we just need. This part uses the custom built module (also experiment specific as each experiment will have different paradigms and event tags). The extract_nslog_event constructs necessary pandas dataframe from ns_eventlog text file which we specified earlier in #Setting-basic-variables.\ncreate_df returns five dataframes, in which nsdata is a list from simply csv-read file that is used to create task-specific pandas dataframes. For example, df_lst is the initial dataframe created that includes all practice, trials, and sentences tasks. The rest of dfs contain task specific data.\n# create pandas data frames for different tasks nsdata, df_lst, df_plst, df_tlst, df_slst = extract_nslog_event.create_df(ns_eventlog)  creating data frame from ns event log... dataframes created for subject 011 trials found: 800 sentences found: 200  From now on, for simplicity sake, we will only examine the actual trials task part in this walkthrough. We can focus on looking at the data structure of trials task. Since the dataframe is already created specifically for trials, what we really want now is the onset (sample numbers) of when the event occured and the condition of the stimuli that was presented.\n# show data frame structure of 2rd index print(df_tlst.iloc[2])  code tlst label lstS onset 99867 cond 4 indx 1 Name: 2, dtype: object  The label for trials task was either a last word start (lstS) or last word end (lstE). Since we are interested in the onset of the word, we will extract just the onsets using the custom code.\n# create onset-only data frame (event tag specifications) df_tlstS = extract_nslog_event.create_df_onset(df_tlst) # show total events of interest len(df_tlstS)  400  Finding impedance check periods and annotating Now that we have dataframes setup, we continue to clean up the raw data. Throughout the acquisition, we ran impedance checks to make sure that all electrodes were in good contact with the scalp and that good signal is being read in. During the impedance check, the waveforms peak in extreme amount and we want to make note of these periods, telling the mne functions to avoid and ignore such periods.\n# find impedance onsets imp_onset, imp_offset, imp_dur = extract_nslog_event.find_impedances(nsdata) # annotate on raw with 'bad' tags (params `reject_by_annotation` will search for 'bad' tags later) annot_imp = mne.Annotations(imp_onset, imp_dur, [\u0026quot;bad imp\u0026quot;] * len(imp_onset), orig_time=raw.info['meas_date']) raw.set_annotations(annot_imp)  finding impedance periods... found 4 impedance periods! \u0026lt;RawEGI | sfv_eeg_011ts.raw, n_channels x n_times : 136 x 989490 (4947.4 sec), ~1.00 GB, data loaded\u0026gt;  Marking bad channels We also want to make note of bad channels. We can manually inspect for bad channels by seeing the actual raw data. raw.plot will show the actual raw file with annotations from above marked as red segments. You can inspect for good/bad channels and manually click on bad channels to mark them bad. Once you manually inspected the channels, type raw.info['bads'] to see how it is updated.\nNote that the plot below is a static figure for example sake. Running the code in ipython will allow us to horizontally and vertically scroll through data. Clicking on a channel will mark that channel red and be considered red. You can see that we\u0026rsquo;ve ran four impedance checks throughout the session (1 task switch period, every 100th trials out fo 400).\n# block=True is useful because it will wait to whatever change you make in the raw file at the plot stage print(raw.plot(bad_color='red', block=True))  Figure(782.64x483.12)  If you already had a list of bad channels noted during the acquisition period, you can skip the above manual inspection and simply specify the bad channels with a line of code:\nraw.info['bads'] = ['E127', 'E107', 'E49', 'E48', 'E115', 'E113', 'E122', 'E121', 'E123', 'E108', 'E63', 'E1'] print(raw.info['bads'])  ['E127', 'E107', 'E49', 'E48', 'E115', 'E113', 'E122', 'E121', 'E123', 'E108', 'E63', 'E1']  Detecting and rejecting eye blinks We\u0026rsquo;ve so far applied generic/broad preprocessing steps, such as bandpass filters, marking chunks of bad segments, and marking bad channels. Now we will look at finding eye blinks in the raw and add more annotations to mark those samples bad.\nStep 1: Setting bipolar reference Because the cap we use do not have EOG-specific channels, we use the channels that are nearest to the eyes and consider those as our virtual eye channels. Thus, such method has the risk of the eye channels actually not having just the eye-related oscillations. This is done by setting the bipolar reference, which is basically the subtraction of two opposing channels (ie. the top and bottom of each eye for eye blinks; the left and right of the eyes for eye movements).\nHere, we use just the right side of the eye only to detect eye blinks. From the subtraction of channel E8 and E126, a virtual channel EB is created.\n# let's begin eye artifact detections print('Starting EOG artifact detection') raw = mne.set_bipolar_reference(raw, ['E8'],['E126'],['EB']) # specify this as the eye channel raw.set_channel_types({'EB': 'eog'}) # double check the changes # print(raw.info['chs'])  Starting EOG artifact detection  Step 2: Detecting eye blinks Now that we have a virtual eye channel to inspect, we can try to identify any eye blinks. Because the virtual eye channel that is created from subtraction of the channels, the waveform of EB channel will be generally flat. You can inspect this by raw.plot.\nEye blinks are generally characterized as two eye channels having sudden opposing peaks. So the methodology is to find a sudden peak within the flat EB line. We have the options of:\n finding eye blinks via mne built in function finding eye blinks via scipy peak finding method  Both results in similar eye blink detections because the methodology of finding local peaks. We will only use the mne built in function and comment out the custom built function that uses scipy. reject_by_annotation will ignore the bad segments marked as bad earlier. The threshold of 0.0001 can be played around with but it is a reasonable threshold set after having manually inspect the data. The events_eog will be an array with [sample number, 0, eventlabel in number]\nevents_eog = eog.find_eog_events(raw, reject_by_annotation=True, thresh=0.0001, verbose=None) # type `help(scipy_annotate_eyeblinks)` for detail # raw = scipy_annotate_eyeblinks(raw, 'EB', 100) print('number of eye blinks detected: ' + str(len(events_eog)))  number of eye blinks detected: 1720  events_eog above will give where the eye blinks occured in samples. We will convert the sample number to seconds so we can annotate on the raw file.\n# get just the sample numbers from the eog events eog_sampleN = [i[0] for i in events_eog] # convert to seconds for annotation-friendly purposes for i in range(0, len(eog_sampleN)): eog_sampleN[i] = eog_sampleN[i] / float(200) # set annotation annot_eog = mne.Annotations(eog_sampleN, [0.1] * len(eog_sampleN), [\u0026quot;bad eye\u0026quot;] * len(eog_sampleN), orig_time = raw.info['meas_date'])  # add this eye blink annotation to the previous annotation by simply adding new_annot = annot_imp + annot_eog raw.set_annotations(new_annot) print('new annotation set!')  new annotation set!  Now that new annotation is set, let\u0026rsquo;s see the changes made to the raw. Again we will just have a figure printed out here. You can see the bad channels marked red (like E1), and bunch of red bars that potentially mark spikes/eye blinks. Because the Times x-axis is so zoomed out, we see all parts being red, but as we see the plot above, that is actually not true. We see that \u0026lsquo;bad eye\u0026rsquo; is annotated for any potential peaks in the \u0026lsquo;EB\u0026rsquo; channel that is newly created from bipolar reference.\n# you can check that more red segments are marked on the raw file print(raw.plot(bad_color='red'))  Figure(782.64x483.12)  Setting rereference Now that bad channels are marked and we know which bad segments to avoid, we will set eeg reference (We want to avoid doing reference before the bad data are marked and rejected).\nprint('setting eeg reference...') raw.set_eeg_reference('average', projection=True)  setting eeg reference... \u0026lt;RawEGI | sfv_eeg_011ts.raw, n_channels x n_times : 135 x 989490 (4947.4 sec), ~1019.5 MB, data loaded\u0026gt;  Creating epochs Now that we have done some primary artifact detections, we can create a first look on how our epochs look. Epochs are time-locked events of interest. Here, we look at the few hundred milliseconds before and after the onset of the last word of a sentence presentation. Before creating the epochs, we will run some custom codes to update the event arrays accordingly so the event labels are properly labeled ie. 1 for onsets, 2 for offsets.\n# first find events related to tlst stim channel in the cleaned raw events_tlst = mne.find_events(raw, stim_channel='tlst') # events_tlst is a array structure ie. (1, 0, 1) and so far, the all the event tags are 1 which is not true # We will update the event tags with 1s and 2s with custom built function # update event ids in mne events array and double check sampling onset timing as sanity check events_tlstS = extract_nslog_event.assign_event_id(df_tlst, events_tlst)  updating mne event array and double checking sampling onset time...  # epoching initially with metadata applied event_id_tlst = dict(lstS=1) tmin = -0.25 # start of each epoch tmax = 0.8 # end of each epoch # set baseline to 0 baseline = (tmin, 0) # picks specify which channels we are interested picks = mne.pick_types(raw.info, meg=False, eeg=True, eog=True, stim=False, exclude='bads') # `metadata` field is used to put in our comprehensive pandas dataframe # it is useful for later creating evoked responses by conditions epochs_tlstS = mne.Epochs(raw, events_tlstS, event_id_tlst, tmin, tmax, proj=False, picks=picks, baseline=baseline, preload=True, reject=None, reject_by_annotation=True, metadata=df_tlstS) print('epochs_tlstS:') print(epochs_tlstS)  epochs_tlstS: \u0026lt;Epochs | 388 events (all good), -0.25 - 0.8 sec, baseline [-0.25, 0], ~72.8 MB, data loaded, with metadata, 'lstS': 388\u0026gt;  We created epochs named epochs_tlstS which is mne\u0026rsquo;s epochs instance. Note that the epochs are 388 instead of original 400. It is likely that the some epochs are dropped from annotations. Let\u0026rsquo;s see if it\u0026rsquo;s true.\n# show drop percentage from mne.Epochs drop_count = 0 for j in range(0, len(epochs_tlstS.drop_log)): if 'bad eye' in epochs_tlstS.drop_log[j]: drop_count += 1 print(str(drop_count) + ' epochs dropped by eog annotation') print('perecentage dropped: ' + str(epochs_tlstS.drop_log_stats()))  12 epochs dropped by eog annotation perecentage dropped: 3.0  Creating evoked response (ERP) Everything looks good. We can create an evoked response by condition. Currently, the epochs_tlst contains all four conditions of the task. By creating an evoked response by condition, we can examine the data for each condition.\n# create evoked respone using pandas query based on metadata created from previous epochs evoked_tlst_c1 = epochs_tlstS[\u0026quot;label=='lstS' and cond=='1'\u0026quot;].average() evoked_tlst_c2 = epochs_tlstS[\u0026quot;label=='lstS' and cond=='2'\u0026quot;].average() evoked_tlst_c3 = epochs_tlstS[\u0026quot;label=='lstS' and cond=='3'\u0026quot;].average() evoked_tlst_c4 = epochs_tlstS[\u0026quot;label=='lstS' and cond=='4'\u0026quot;].average()  Evoked responses are created by condition. Let\u0026rsquo;s just inspect the first one. The figure below will show the waveforms of all channels (except the ones marked bad and bipolar referenced channels) with total N epochs in that condition. Originally, N=100 for each condition.\nWe can see something happening at 100ms to 300ms range after the onset of the word, which is time point 0s.\nprint(evoked_tlst_c1.plot())  Figure(460.8x216)  Figure above is in black and could be hard to inspect. A more interesting plot could be using plot_joint method. You can see that most of the channels in the frontal region are showing flat, insignificant patterns. On the other hand, the right occipital (marked in red, purplish colors) is revealing potentially interesting results.\nprint(evoked_tlst_c1.plot_joint(times='peaks'))  /Users/Jin/Library/Python/2.7/lib/python/site-packages/mne/transforms.py:689: RuntimeWarning: invalid value encountered in divide out[:, 2] = np.arccos(cart[:, 2] / out[:, 0])  Figure(576x302.4)  To avoid going through the same process everytime you load in a subject, we can save the progress by saving the resulted epochs (ie. epochs_tlstS or raw instance). In the other notebook, we will continue with more advanced artifact detection using the saved epochs.\nepochs_tlstS.save('epochs_tlsts-epo.fif', split_size='2GB', fmt='single', verbose=True)  Sources and useful links MNE querying metadata: https://martinos.org/mne/stable/auto_examples/preprocessing/plot_metadata_query.html\nMNE annotations: https://martinos.org/mne/stable/generated/mne.Annotations.html\n","date":1525132800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1525132800,"objectID":"c1741a55e6e61866ee701e693039a694","permalink":"https://jinjeon.me/post/eeg-basics/","publishdate":"2018-05-01T00:00:00Z","relpermalink":"/post/eeg-basics/","section":"post","summary":"This script runs through sample experiment data from manually reading in raw file to preprocessing through applying filters, eye blink detection using peak finding techniques. Then we create epochs and plot evoked responses.","tags":["eeg","python","signal processing","research"],"title":"EEG/Signal Processing--Basics Part 1","type":"post"},{"authors":null,"categories":null,"content":"Shadow casting possess different physical affordances that follow the laws of physics. Different shadow shapes and patterns can be created by manipulating the shadow’s light source direction and intensity, the physical object’s distance and angle, and the texture of the surface in which the shadow is casted. These physical properties can be used by the operator to create creative patterns with the projected shadows. Some of these physical affordances include playing with the shadow’s movement, superposing different object’s shadows and scaling the shadow’s size by moving the physical object closer or further from the light source. As aesthetically pleasing with its unique black and white contrast, shadows are a fascinating form of media that can create different textures and details based on the skill of the user.\nShadow Play aims to enhance such a playful shadow experience to more advanced creative form of art by allowing users digitally manipulate their shadows. By adding new digital affordances Shadow Play, users can print and add layers of multiple shadows onto the screen, and invigorate them with animated effects and motions. With such various mix of augmented shadow effects, users can utilize their body as a tool for creating their own unique shadow artwork and animations.\nSee full paper Summary of interaction:\nInput/Output: Shadow Play requires ample activity space for interaction. The system recognizes the user within the activity space, and then displays the digitally augmented shadow onto the projected screen. Optimizing the interaction was one of our key concerns. With camera as an input device for users to communicate with Shadow Play, we wanted to depict the metaphor of users taking pictures and filming the creation. By selecting different features, such as snapshot, mirror, effects, and loop, users can create unique patterns and artwork. Interaction:\n1. Setting the environment: With the shoot feature, users can add layers of current shadows to the previous ones. Users can create static shadows, in which we refer to as background/environment of the artwork. 2. Adding in motion and effects: After the environment has been set, users can enliven the shadow by adding in animated motions and effects. The loop feature, mainly inspired by Instagram, records the motion of shadows and then is automatically looped. By adding in the fireball effect, Shadow Play recognizes the hand motion of reaching out, which then shoots out a fireball from the tip of the hand. 3. Advanced: Mirror and Patterns: The mirror feature allows users to create symmetrical images and animation. The mirror feature is especially useful for creating patterns and symmetrical image, such as butterfly. With the mix of these features, users can create shadow artwork in playful environment. Shadow Play resembles the thought process and planning of an actual painting. Just as an artist would plan ahead where certain objects would be placed within the space before making the strokes, Shadow Play users have to deliberately organize the angle and distance of their body in order to perfect the layers of shadow into a single object shape. Such deliberation allows for more playful and interactive activity. By having the augmented shadows displayed on the screen, there is a loop of feedback and manipulation as users constantly refer to the captured shadow to make adjustments accordingly.\u0026rdquo;\n","date":1512864000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1512864000,"objectID":"bbb4c6095e8323a9107c60b88b000c0f","permalink":"https://jinjeon.me/project/shadowplay/","publishdate":"2017-12-10T00:00:00Z","relpermalink":"/project/shadowplay/","section":"project","summary":"Shadow Play aims to enhance playful shadow experience to more advanced creative form of art by allowing users digitally manipulate their shadows. By adding new digital affordances Shadow Play, users can print and add layers of multiple shadows onto the screen, and invigorate them with animated effects and motions. With such various mix of augmented shadow effects, users can ...","tags":["side-projects"],"title":"Tangible UI: Augmented Shadow Play","type":"project"},{"authors":null,"categories":null,"content":"Object classification is essential to human learning as it helps us cope with various stimulus around the world. Regardless of multiple features within a single object, object classification seems to occur seamlessly within our cognitive process. In this experiment, we test how we prioritize each feature within an object and how these features are weighted when we categorize a certain object. Test subjects were given novel shapes that each featured either size, color, or orientation, and had to determine whether the shape belongs to a category of a given prototypical shape. The preliminary result showed that color was the single most determining feature when categorizing an object, showing 72.6% of incorporation in all trials, while orientation was the least with 60.7%, but the differences were not statistically significant. We further went on to use logistic regression to analyze the result, which showed thresholds for identifying a novel object to be in a certain category. However, these thresholds for each feature was not significantly different. The experiment suggests that categorization is more of an elaborate and holistic process that combines different features when categorizing a novel object.\n","date":1494374400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1494374400,"objectID":"b5ecd274515c9f24ec97a0896b93d7d9","permalink":"https://jinjeon.me/project/featureprioritization/","publishdate":"2017-05-10T00:00:00Z","relpermalink":"/project/featureprioritization/","section":"project","summary":"Object classification is essential to human learning as it helps us cope with various stimulus around the world. Regardless of multiple features within a single object, object classification seems to occur seamlessly within our cognitive process. In this experiment, we test how we prioritize each feature within an object and how these features are weighted when we categorize a certain","tags":["side-projects"],"title":"Feature Prioritization in Classification of Novel Objects","type":"project"},{"authors":null,"categories":null,"content":"By analyzing Yelp’s dataset, specifically star ratings and text reviews, we created a classifier that predicts whether reviews are positive (star ratings of four or five) or negative (star ratings of one or two). We excluded star ratings of three because we weren’t sure whether they were positive or negative. While Yelp’s star ratings are helpful for concise overview of local businesses, they are also crucial metrics for businesses as the ratings reflect their reputations. However, we realized that star ratings are often misleading as they are subject to user bias and preference. Thus, we wanted to predict ratings solely based on textual features of the reviews and exclude any potential human errors and biases. Performing logistic regression with the combined five features, we were able to correctly predict the reviews with an overall accuracy of 79%.\n","date":1481328000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1481328000,"objectID":"29805d4af0ee8b04ed5961745fb9fc71","permalink":"https://jinjeon.me/project/yelp/","publishdate":"2016-12-10T00:00:00Z","relpermalink":"/project/yelp/","section":"project","summary":"By analyzing Yelp’s dataset, specifically star ratings and text reviews, we created a classifier that predicts whether reviews are positive (star ratings of four or five) or negative (star ratings of one or two). We excluded star ratings of three because we weren’t sure whether they were positive or negative. While Yelp’s star ratings are helpful for concise overview of local businesses","tags":["side-projects"],"title":"Yelp Dataset Challenge","type":"project"},{"authors":null,"categories":null,"content":" In Fall 2015, I took a semester off to build my own mobile app. I wanted to develop a niche-specific social media that is just for families. Starting the project with mere passion and lacking practical knowledge, I self-taught how to conduct market research, design and build prototypes. I hired a developer to make tangible results, and won first place in Rehoboth Business Idea Competition with $5k support. I also received free office space from the state government.\n Developed storyboard and high fidelity prototype through iterations of market research, surveys, and user testing   From ideation and product management to recruiting, engaged in every aspect of early stage startup as founder \n\nAbout Homy Problem Statement:\nWe are spending the least time with the most important people in our lives, family, while spending more and more time with strangers, coworkers and friends. The cause of the problem has been generally identified as increased work and commute time, and hectic individual routines.\nDesign Solution:\nHomy attempts to solve this growing social problem by recreating online home and allowing families to seamlessly connect. With unique post-it style fridge page, Homy wants to encourage families to communicate more often. The mission is to provide emotional communication service to enrich family’s real, offline relationship. Check more at:\nDefining Market Opportunity.pdf\n","date":1447113600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1447113600,"objectID":"243227f7887b94f8d75a2ce74e404f6f","permalink":"https://jinjeon.me/project/homy/","publishdate":"2015-11-10T00:00:00Z","relpermalink":"/project/homy/","section":"project","summary":"Homy provides a private space just for families as an emotional communication tool just for families","tags":["side-projects"],"title":"Homy, Private Social Network for Families","type":"project"}]